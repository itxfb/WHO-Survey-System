//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WHO_Survey_System.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DatabaseEntities : DbContext
    {
        public DatabaseEntities()
            : base("name=DatabaseEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Company> Companies { get; set; }
        public virtual DbSet<CreateSurvey> CreateSurveys { get; set; }
        public virtual DbSet<SurveyAccessCredential> SurveyAccessCredentials { get; set; }
        public virtual DbSet<SurveyResponse> SurveyResponses { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int ChangeCollate(ObjectParameter abc)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ChangeCollate", abc);
        }
    
        public virtual int GetAllRecords(string tblName, string entityName, string entityValue, string join, string isActive, string row, string ofset, string sortType, string sortDirection, Nullable<int> count)
        {
            var tblNameParameter = tblName != null ?
                new ObjectParameter("TblName", tblName) :
                new ObjectParameter("TblName", typeof(string));
    
            var entityNameParameter = entityName != null ?
                new ObjectParameter("EntityName", entityName) :
                new ObjectParameter("EntityName", typeof(string));
    
            var entityValueParameter = entityValue != null ?
                new ObjectParameter("EntityValue", entityValue) :
                new ObjectParameter("EntityValue", typeof(string));
    
            var joinParameter = join != null ?
                new ObjectParameter("Join", join) :
                new ObjectParameter("Join", typeof(string));
    
            var isActiveParameter = isActive != null ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(string));
    
            var rowParameter = row != null ?
                new ObjectParameter("row", row) :
                new ObjectParameter("row", typeof(string));
    
            var ofsetParameter = ofset != null ?
                new ObjectParameter("ofset", ofset) :
                new ObjectParameter("ofset", typeof(string));
    
            var sortTypeParameter = sortType != null ?
                new ObjectParameter("SortType", sortType) :
                new ObjectParameter("SortType", typeof(string));
    
            var sortDirectionParameter = sortDirection != null ?
                new ObjectParameter("SortDirection", sortDirection) :
                new ObjectParameter("SortDirection", typeof(string));
    
            var countParameter = count.HasValue ?
                new ObjectParameter("count", count) :
                new ObjectParameter("count", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllRecords", tblNameParameter, entityNameParameter, entityValueParameter, joinParameter, isActiveParameter, rowParameter, ofsetParameter, sortTypeParameter, sortDirectionParameter, countParameter);
        }
    
        public virtual ObjectResult<Nullable<long>> GetTableCount(string tblName)
        {
            var tblNameParameter = tblName != null ?
                new ObjectParameter("TblName", tblName) :
                new ObjectParameter("TblName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<long>>("GetTableCount", tblNameParameter);
        }
    
        public virtual ObjectResult<Nullable<decimal>> InsertOrUpdate(string id, string tblName, string columns, string values)
        {
            var idParameter = id != null ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(string));
    
            var tblNameParameter = tblName != null ?
                new ObjectParameter("TblName", tblName) :
                new ObjectParameter("TblName", typeof(string));
    
            var columnsParameter = columns != null ?
                new ObjectParameter("Columns", columns) :
                new ObjectParameter("Columns", typeof(string));
    
            var valuesParameter = values != null ?
                new ObjectParameter("Values", values) :
                new ObjectParameter("Values", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<decimal>>("InsertOrUpdate", idParameter, tblNameParameter, columnsParameter, valuesParameter);
        }
    }
}
